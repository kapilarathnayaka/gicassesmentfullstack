name: Deploy to EC2 on Push

on:
  push:
    branches:
      - main  # Trigger deployment when code is pushed to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH Key for EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AWS_EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh ec2-user@${{ secrets.AWS_EC2_INSTANCE_IP }} << 'EOF'
            # Install Git & Docker if not installed
            sudo yum update -y
            if ! command -v git &> /dev/null; then
              sudo yum install -y git
            fi
            if ! command -v docker &> /dev/null; then
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -aG docker ec2-user
            fi
            
            # Navigate to home directory
            cd /home/ec2-user

            rm -rf gicassesmentfullstack

            # Clone or pull latest changes
            if [ ! -d "gicassesmentfullstack" ]; then
              git clone git@github.com:kapilarathnayaka/gicassesmentfullstack.git
            else
              cd gicassesmentfullstack
              git pull origin main
            fi
            
            # List files to confirm
            ls -la gicassesmentfullstack
            
            # Move to backend folder and build Docker
            cd gicassesmentfullstack/CafeEmployeeBackend
            if [ ! -f Dockerfile ]; then
              echo "Dockerfile not found! Exiting."
              exit 1
            fi
            
            # Stop and remove old container if running
            docker stop gic-container || true
            docker rm gic-container || true

            # Build and run the Docker container
            docker build -t gic-test-image .
            #docker run -d --name gic-container -p 8080:80 gic-test-image
            docker run -d -p 8080:80 -e CONNECTION_STRING=${{ secrets.CONNECTION_STRING }} --name gic-container myapp

          EOF
